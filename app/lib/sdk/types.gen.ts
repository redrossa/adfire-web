// This file is auto-generated by @hey-api/openapi-ts

/**
 * A textual representation of this entity.
 */
export type Name = string;

/**
 * A globally unique identifier for this entity.
 */
export type Id = string;

/**
 * Account types that the user owns.
 */
export const InternalAccountType = {
    ASSET: 'asset',
    LIABILITY: 'liability'
} as const;

/**
 * Account types that the user owns.
 */
export type InternalAccountType = typeof InternalAccountType[keyof typeof InternalAccountType];

/**
 * Account types that the user does not own.
 */
export const ExternalAccountType = {
    INCOME: 'income',
    EXPENSE: 'expense'
} as const;

/**
 * Account types that the user does not own.
 */
export type ExternalAccountType = typeof ExternalAccountType[keyof typeof ExternalAccountType];

/**
 * Account types with a normal debit balance.
 */
export const DebitAccountType = {
    ASSET: 'asset',
    EXPENSE: 'expense'
} as const;

/**
 * Account types with a normal debit balance.
 */
export type DebitAccountType = typeof DebitAccountType[keyof typeof DebitAccountType];

/**
 * Account types with a normal credit balance.
 */
export const CreditAccountType = {
    LIABILITY: 'liability',
    INCOME: 'income'
} as const;

/**
 * Account types with a normal credit balance.
 */
export type CreditAccountType = typeof CreditAccountType[keyof typeof CreditAccountType];

/**
 * Account type choices. Each type of account changes balance based on the following context:
 * * `asset` (+) debit; (-) credit
 * * `liability` (+) credit; (-) debit
 * * `income` (+) credit; (-) debit
 * * `expense` (+) debit; (-) credit
 *
 * In addition, internal accounts, e.g. `asset` and `liability`, contribute to the equity of
 * the user portfolio following this equation: `E = A - L`, where `E` is portfolio equity/balance,
 * `A` is total balance of asset accounts, and `L` is total balance of liability accounts. The opposite,
 * external accounts, e.g. `income` and `expense` do not contribute to portfolio equity.
 *
 */
export const AccountType = {
    ASSET: 'asset',
    LIABILITY: 'liability',
    INCOME: 'income',
    EXPENSE: 'expense'
} as const;

/**
 * Account type choices. Each type of account changes balance based on the following context:
 * * `asset` (+) debit; (-) credit
 * * `liability` (+) credit; (-) debit
 * * `income` (+) credit; (-) debit
 * * `expense` (+) debit; (-) credit
 *
 * In addition, internal accounts, e.g. `asset` and `liability`, contribute to the equity of
 * the user portfolio following this equation: `E = A - L`, where `E` is portfolio equity/balance,
 * `A` is total balance of asset accounts, and `L` is total balance of liability accounts. The opposite,
 * external accounts, e.g. `income` and `expense` do not contribute to portfolio equity.
 *
 */
export type AccountType = typeof AccountType[keyof typeof AccountType];

/**
 * A simplified representation of an account before creation.
 */
export type AccountInput = {
    name: Name;
    type: AccountType;
    /**
     * The institutional domain name associated with this account.
     */
    domain?: string;
};

/**
 * An entity that acts upon a collection of transactions.
 */
export type Account = AccountInput & {
    id: Id;
};

/**
 * Transaction type choices.
 */
export const TransactionType = {
    INCOME: 'income',
    EXPENSE: 'expense',
    TRANSFER: 'transfer'
} as const;

/**
 * Transaction type choices.
 */
export type TransactionType = typeof TransactionType[keyof typeof TransactionType];

/**
 * A simplified representation of a transaction before creation.
 */
export type TransactionInput = {
    name: Name;
    type: TransactionType;
    /**
     * All input entries must have unique accounts. The sum of all debits must equal the sum of all credits.
     *
     */
    entries: Array<EntryInput>;
};

/**
 * A detail of one side of a transaction.
 */
export type TransactionSide = {
    /**
     * List of accounts on this side.
     */
    accounts: Array<Account>;
    /**
     * The net equity due to the balance changes of accounts in this side.
     */
    equity: number;
};

/**
 * An event involving an exchange of monetary values between accounts.
 */
export type Transaction = {
    id: Id;
    name: Name;
    type: TransactionType;
    /**
     * The earliest date of all entries in this transaction.
     */
    date: string;
    /**
     * The net equity of all the balance changes of the accounts involved.
     */
    equity: number;
    /**
     * The total value transacted
     */
    value?: number;
    from: TransactionSide;
    to: TransactionSide;
};

/**
 * A simplified representation of an entry before creation.
 */
export type EntryInput = {
    /**
     * The date this entry took place.
     */
    date: string;
    /**
     * The amount this entry contributes to the account balance.
     */
    amount: number;
    accountId: Id;
};

/**
 * A component of a transaction that records a balance change to an account at a specific date.
 */
export type Entry = {
    id: Id;
    /**
     * The date this entry took place.
     */
    date: string;
    /**
     * The amount this entry contributes to the account balance.
     */
    amount: number;
    account: Account;
};

/**
 * Session token created by authjs
 */
export type SessionToken = string;

/**
 * Entity identifier.
 */
export type Id2 = Id;

/**
 * Order to sort entities by date.
 */
export const Order = {
    ASC: 'asc',
    DESC: 'desc'
} as const;

/**
 * Order to sort entities by date.
 */
export type Order = typeof Order[keyof typeof Order];

export type GetAccountsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/accounts';
};

export type GetAccountsResponses = {
    /**
     * OK
     */
    200: Array<Account>;
};

export type GetAccountsResponse = GetAccountsResponses[keyof GetAccountsResponses];

export type PostAccountsData = {
    body: AccountInput;
    path?: never;
    query?: never;
    url: '/accounts';
};

export type PostAccountsErrors = {
    /**
     * Unprocessable Content
     */
    422: unknown;
};

export type PostAccountsResponses = {
    /**
     * Created
     */
    201: Account;
};

export type PostAccountsResponse = PostAccountsResponses[keyof PostAccountsResponses];

export type DeleteAccountsByIdData = {
    body?: never;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: never;
    url: '/accounts/{id}';
};

export type DeleteAccountsByIdErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type DeleteAccountsByIdResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteAccountsByIdResponse = DeleteAccountsByIdResponses[keyof DeleteAccountsByIdResponses];

export type GetAccountsByIdData = {
    body?: never;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: never;
    url: '/accounts/{id}';
};

export type GetAccountsByIdErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetAccountsByIdResponses = {
    /**
     * OK
     */
    200: Account;
};

export type GetAccountsByIdResponse = GetAccountsByIdResponses[keyof GetAccountsByIdResponses];

export type PutAccountsByIdData = {
    body: AccountInput;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: never;
    url: '/accounts/{id}';
};

export type PutAccountsByIdErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Unprocessable content
     */
    422: unknown;
};

export type PutAccountsByIdResponses = {
    /**
     * OK
     */
    200: Account;
    /**
     * Created
     */
    201: Account;
};

export type PutAccountsByIdResponse = PutAccountsByIdResponses[keyof PutAccountsByIdResponses];

export type GetAccountsByIdTransactionsData = {
    body?: never;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: {
        /**
         * Order to sort entities by date.
         */
        order?: 'asc' | 'desc';
    };
    url: '/accounts/{id}/transactions';
};

export type GetAccountsByIdTransactionsErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetAccountsByIdTransactionsResponses = {
    /**
     * OK
     */
    200: Array<Transaction>;
};

export type GetAccountsByIdTransactionsResponse = GetAccountsByIdTransactionsResponses[keyof GetAccountsByIdTransactionsResponses];

export type GetTransactionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Order to sort entities by date.
         */
        order?: 'asc' | 'desc';
    };
    url: '/transactions';
};

export type GetTransactionsResponses = {
    /**
     * OK
     */
    200: Array<Transaction>;
};

export type GetTransactionsResponse = GetTransactionsResponses[keyof GetTransactionsResponses];

export type PostTransactionsData = {
    body: TransactionInput;
    path?: never;
    query?: never;
    url: '/transactions';
};

export type PostTransactionsResponses = {
    /**
     * Created
     */
    201: Transaction;
};

export type PostTransactionsResponse = PostTransactionsResponses[keyof PostTransactionsResponses];

export type DeleteTransactionsByIdData = {
    body?: never;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: never;
    url: '/transactions/{id}';
};

export type DeleteTransactionsByIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteTransactionsByIdResponse = DeleteTransactionsByIdResponses[keyof DeleteTransactionsByIdResponses];

export type GetTransactionsByIdData = {
    body?: never;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: never;
    url: '/transactions/{id}';
};

export type GetTransactionsByIdResponses = {
    /**
     * OK
     */
    200: Transaction;
};

export type GetTransactionsByIdResponse = GetTransactionsByIdResponses[keyof GetTransactionsByIdResponses];

export type PutTransactionsByIdData = {
    body: TransactionInput;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: never;
    url: '/transactions/{id}';
};

export type PutTransactionsByIdResponses = {
    /**
     * OK
     */
    200: Transaction;
    /**
     * Created
     */
    201: Transaction;
};

export type PutTransactionsByIdResponse = PutTransactionsByIdResponses[keyof PutTransactionsByIdResponses];

export type GetTransactionsByIdEntriesData = {
    body?: never;
    path: {
        /**
         * Entity identifier.
         */
        id: Id;
    };
    query?: {
        /**
         * Order to sort entities by date.
         */
        order?: 'asc' | 'desc';
    };
    url: '/transactions/{id}/entries';
};

export type GetTransactionsByIdEntriesResponses = {
    /**
     * OK
     */
    200: Array<Entry>;
};

export type GetTransactionsByIdEntriesResponse = GetTransactionsByIdEntriesResponses[keyof GetTransactionsByIdEntriesResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/v0` | (string & {});
};