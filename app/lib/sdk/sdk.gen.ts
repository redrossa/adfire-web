// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetAccountsData, GetAccountsResponses, PostAccountsData, PostAccountsResponses, PostAccountsErrors, DeleteAccountsByIdData, DeleteAccountsByIdResponses, DeleteAccountsByIdErrors, GetAccountsByIdData, GetAccountsByIdResponses, GetAccountsByIdErrors, PutAccountsByIdData, PutAccountsByIdResponses, PutAccountsByIdErrors, GetAccountsByIdTransactionsData, GetAccountsByIdTransactionsResponses, GetAccountsByIdTransactionsErrors, GetTransactionsData, GetTransactionsResponses, PostTransactionsData, PostTransactionsResponses, DeleteTransactionsByIdData, DeleteTransactionsByIdResponses, GetTransactionsByIdData, GetTransactionsByIdResponses, PutTransactionsByIdData, PutTransactionsByIdResponses, GetTransactionsByIdEntriesData, GetTransactionsByIdEntriesResponses } from './types.gen';
import { zGetAccountsData, zGetAccountsResponse, zPostAccountsData, zPostAccountsResponse, zDeleteAccountsByIdData, zDeleteAccountsByIdResponse, zGetAccountsByIdData, zGetAccountsByIdResponse, zPutAccountsByIdData, zPutAccountsByIdResponse, zGetAccountsByIdTransactionsData, zGetAccountsByIdTransactionsResponse, zGetTransactionsData, zGetTransactionsResponse, zPostTransactionsData, zPostTransactionsResponse, zDeleteTransactionsByIdData, zDeleteTransactionsByIdResponse, zGetTransactionsByIdData, zGetTransactionsByIdResponse, zPutTransactionsByIdData, zPutTransactionsByIdResponse, zGetTransactionsByIdEntriesData, zGetTransactionsByIdEntriesResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Returns all accounts.
 * Returns all accounts belonging to the session user sorted by name in ascending order. The balance in each account item is the current balance of the respective account.
 *
 */
export const getAccounts = <ThrowOnError extends boolean = false>(options: Options<GetAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAccountsResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetAccountsData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetAccountsResponse.parseAsync(data);
        },
        url: '/accounts',
        ...options
    });
};

/**
 * Creates a new account.
 * Creates a new account belonging to the session user. The ID of the account is generated by converting the given name to kebab case. Account names must be unique.
 *
 */
export const postAccounts = <ThrowOnError extends boolean = false>(options: Options<PostAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAccountsResponses, PostAccountsErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostAccountsData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPostAccountsResponse.parseAsync(data);
        },
        url: '/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes an account with the given ID.
 * Deletes an account with the given ID belonging to the session user.
 */
export const deleteAccountsById = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAccountsByIdResponses, DeleteAccountsByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDeleteAccountsByIdData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zDeleteAccountsByIdResponse.parseAsync(data);
        },
        url: '/accounts/{id}',
        ...options
    });
};

/**
 * Returns an account with the given ID.
 * Returns an account with the given ID belonging to the session user. The balance in the response is the current balance of the account.
 *
 */
export const getAccountsById = <ThrowOnError extends boolean = false>(options: Options<GetAccountsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAccountsByIdResponses, GetAccountsByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetAccountsByIdData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetAccountsByIdResponse.parseAsync(data);
        },
        url: '/accounts/{id}',
        ...options
    });
};

/**
 * Replaces the account with the given ID
 * Replaces the account with the given ID belonging to the session user with a new content, or creates a new one if an account with the given ID does not exist. If the name of the account changes, the ID of the account is also updated to reflect the kebab case of the new name.
 *
 */
export const putAccountsById = <ThrowOnError extends boolean = false>(options: Options<PutAccountsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAccountsByIdResponses, PutAccountsByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPutAccountsByIdData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPutAccountsByIdResponse.parseAsync(data);
        },
        url: '/accounts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Returns all transactions of an account.
 * Returns a sorted series of all transactions of an account with the given ID belonging to the session user.
 */
export const getAccountsByIdTransactions = <ThrowOnError extends boolean = false>(options: Options<GetAccountsByIdTransactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAccountsByIdTransactionsResponses, GetAccountsByIdTransactionsErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetAccountsByIdTransactionsData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetAccountsByIdTransactionsResponse.parseAsync(data);
        },
        url: '/accounts/{id}/transactions',
        ...options
    });
};

/**
 * Returns all transactions.
 * Returns a sorted series of all transactions of the session user.
 */
export const getTransactions = <ThrowOnError extends boolean = false>(options: Options<GetTransactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTransactionsResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetTransactionsData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetTransactionsResponse.parseAsync(data);
        },
        url: '/transactions',
        ...options
    });
};

/**
 * Creates a new transaction.
 * Creates a new transaction belonging to the session user.
 */
export const postTransactions = <ThrowOnError extends boolean = false>(options: Options<PostTransactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTransactionsResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostTransactionsData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPostTransactionsResponse.parseAsync(data);
        },
        url: '/transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the transaction with the given ID.
 * Deletes the transaction with the given ID belonging to the user.
 */
export const deleteTransactionsById = <ThrowOnError extends boolean = false>(options: Options<DeleteTransactionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTransactionsByIdResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDeleteTransactionsByIdData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zDeleteTransactionsByIdResponse.parseAsync(data);
        },
        url: '/transactions/{id}',
        ...options
    });
};

/**
 * Returns a transaction with the given ID.
 * Returns a transaction with the given ID belonging to the user.
 */
export const getTransactionsById = <ThrowOnError extends boolean = false>(options: Options<GetTransactionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTransactionsByIdResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetTransactionsByIdData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetTransactionsByIdResponse.parseAsync(data);
        },
        url: '/transactions/{id}',
        ...options
    });
};

/**
 * Replaces the transaction with the given ID.
 * Replaces the transaction with the given ID belonging to the user, or creates a new one if the transaction with the given ID does not exist.
 *
 */
export const putTransactionsById = <ThrowOnError extends boolean = false>(options: Options<PutTransactionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTransactionsByIdResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPutTransactionsByIdData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPutTransactionsByIdResponse.parseAsync(data);
        },
        url: '/transactions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Returns all entries of a transaction
 * Returns a sorted series of all entries of a transaction with the given ID belonging to the session user.
 */
export const getTransactionsByIdEntries = <ThrowOnError extends boolean = false>(options: Options<GetTransactionsByIdEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTransactionsByIdEntriesResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetTransactionsByIdEntriesData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetTransactionsByIdEntriesResponse.parseAsync(data);
        },
        url: '/transactions/{id}/entries',
        ...options
    });
};