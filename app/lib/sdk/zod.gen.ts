// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * A textual representation of this entity.
 */
export const zName = z.string().min(1).max(256);

/**
 * A globally unique identifier for this entity.
 */
export const zId = z.uuid();

/**
 * Account types that the user owns.
 */
export const zInternalAccountType = z.enum([
    'asset',
    'liability'
]);

/**
 * Account types that the user does not own.
 */
export const zExternalAccountType = z.enum([
    'income',
    'expense'
]);

/**
 * Account types with a normal debit balance.
 */
export const zDebitAccountType = z.enum([
    'asset',
    'expense'
]);

/**
 * Account types with a normal credit balance.
 */
export const zCreditAccountType = z.enum([
    'liability',
    'income'
]);

/**
 * Account type choices. Each type of account changes balance based on the following context:
 * * `asset` (+) debit; (-) credit
 * * `liability` (+) credit; (-) debit
 * * `income` (+) credit; (-) debit
 * * `expense` (+) debit; (-) credit
 *
 * In addition, internal accounts, e.g. `asset` and `liability`, contribute to the equity of
 * the user portfolio following this equation: `E = A - L`, where `E` is portfolio equity/balance,
 * `A` is total balance of asset accounts, and `L` is total balance of liability accounts. The opposite,
 * external accounts, e.g. `income` and `expense` do not contribute to portfolio equity.
 *
 */
export const zAccountType = z.enum([
    'asset',
    'liability',
    'income',
    'expense'
]);

/**
 * A simplified representation of an account before creation.
 */
export const zAccountInput = z.object({
    name: zName,
    type: zAccountType,
    domain: z.optional(z.string())
});

/**
 * An entity that acts upon a collection of transactions.
 */
export const zAccount = zAccountInput.and(z.object({
    id: zId
}));

/**
 * Transaction type choices.
 */
export const zTransactionType = z.enum([
    'income',
    'expense',
    'transfer'
]);

/**
 * A simplified representation of an entry before creation.
 */
export const zEntryInput = z.object({
    date: z.iso.date(),
    amount: z.number(),
    accountId: zId
});

/**
 * A simplified representation of a transaction before creation.
 */
export const zTransactionInput = z.object({
    name: zName,
    type: zTransactionType,
    entries: z.array(zEntryInput)
});

/**
 * A detail of one side of a transaction.
 */
export const zTransactionSide = z.object({
    accounts: z.array(zAccount),
    equity: z.number()
});

/**
 * An event involving an exchange of monetary values between accounts.
 */
export const zTransaction = z.object({
    id: zId,
    name: zName,
    type: zTransactionType,
    date: z.iso.date(),
    equity: z.number(),
    value: z.optional(z.number().gt(true)),
    from: zTransactionSide,
    to: zTransactionSide
});

/**
 * A component of a transaction that records a balance change to an account at a specific date.
 */
export const zEntry = z.object({
    id: zId,
    date: z.iso.date(),
    amount: z.number(),
    account: zAccount
});

/**
 * Session token created by authjs
 */
export const zSessionToken = z.uuid();

/**
 * Entity identifier.
 */
export const zId2 = zId;

/**
 * Order to sort entities by date.
 */
export const zOrder = z.enum([
    'asc',
    'desc'
]);

export const zGetAccountsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetAccountsResponse = z.array(zAccount);

export const zPostAccountsData = z.object({
    body: zAccountInput,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zPostAccountsResponse = zAccount;

export const zDeleteAccountsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: zId
    }),
    query: z.optional(z.never())
});

/**
 * No content
 */
export const zDeleteAccountsByIdResponse = z.void();

export const zGetAccountsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: zId
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetAccountsByIdResponse = zAccount;

export const zPutAccountsByIdData = z.object({
    body: zAccountInput,
    path: z.object({
        id: zId
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPutAccountsByIdResponse = zAccount;

export const zGetAccountsByIdTransactionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: zId
    }),
    query: z.optional(z.object({
        order: z.optional(z.enum([
            'asc',
            'desc'
        ]))
    }))
});

/**
 * OK
 */
export const zGetAccountsByIdTransactionsResponse = z.array(zTransaction);

export const zGetTransactionsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        order: z.optional(z.enum([
            'asc',
            'desc'
        ]))
    }))
});

/**
 * OK
 */
export const zGetTransactionsResponse = z.array(zTransaction);

export const zPostTransactionsData = z.object({
    body: zTransactionInput,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zPostTransactionsResponse = zTransaction;

export const zDeleteTransactionsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: zId
    }),
    query: z.optional(z.never())
});

/**
 * No Content
 */
export const zDeleteTransactionsByIdResponse = z.void();

export const zGetTransactionsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: zId
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetTransactionsByIdResponse = zTransaction;

export const zPutTransactionsByIdData = z.object({
    body: zTransactionInput,
    path: z.object({
        id: zId
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPutTransactionsByIdResponse = zTransaction;

export const zGetTransactionsByIdEntriesData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: zId
    }),
    query: z.optional(z.object({
        order: z.optional(z.enum([
            'asc',
            'desc'
        ]))
    }))
});

/**
 * OK
 */
export const zGetTransactionsByIdEntriesResponse = z.array(zEntry);